// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SynthesisAPI.Models;

#nullable disable

namespace SynthesisAPI.Migrations
{
    [DbContext(typeof(MonsterDbContext))]
    [Migration("20240116102638_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonsterMonsterCombination", b =>
                {
                    b.Property<Guid>("CombinationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MonsterId")
                        .HasColumnType("uuid");

                    b.HasKey("CombinationId", "MonsterId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterMonsterCombination");
                });

            modelBuilder.Entity("SynthesisAPI.Models.Monster", b =>
                {
                    b.Property<Guid>("MonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reservation_date");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("details");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("family");

                    b.Property<string>("GameID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("gameid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<char>("Rank")
                        .HasColumnType("character(1)")
                        .HasColumnName("rank");

                    b.Property<int[]>("Statistics")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("statistics");

                    b.HasKey("MonsterId");

                    b.ToTable("MonsterItems");
                });

            modelBuilder.Entity("SynthesisAPI.Models.MonsterCombination", b =>
                {
                    b.Property<Guid>("CombinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("CombinationId");

                    b.ToTable("MonsterCombination");
                });

            modelBuilder.Entity("MonsterMonsterCombination", b =>
                {
                    b.HasOne("SynthesisAPI.Models.MonsterCombination", null)
                        .WithMany()
                        .HasForeignKey("CombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SynthesisAPI.Models.Monster", null)
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
